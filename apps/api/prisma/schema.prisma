generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  app                  App?
  settings             Settings?
  refreshTokens        RefreshToken[]
  passwordResetTokens  PasswordResetToken[]

  @@map("users")
}

model App {
  id                 String   @id @default(cuid())
  userId             String   @unique
  taskListOrder      String[] @default([])
  taskInsertPosition String   @default("top")
  autoSort           Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  user                  User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  collaborativeSessions CollaborativeSession[]

  @@map("apps")
}

model TaskList {
  id         String   @id @default(cuid())
  name       String
  background String?  @default("")
  taskOrder  String[] @default([])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  tasks                 Task[]
  share                 TaskListShare?
  document              TaskListDocument?
  collaborativeSessions CollaborativeSession[]

  @@map("task_lists")
}

model Task {
  id         String   @id @default(cuid())
  text       String
  completed  Boolean  @default(false)
  date       String?
  taskListId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  taskList TaskList @relation(fields: [taskListId], references: [id], onDelete: Cascade)

  @@index([taskListId])
  @@index([taskListId, completed])
  @@index([taskListId, createdAt])
  @@map("tasks")
}

model Settings {
  id        String   @id @default(cuid())
  userId    String   @unique
  theme     String   @default("system")
  language  String   @default("ja")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("settings")
}

model TaskListShare {
  id         String   @id @default(cuid())
  taskListId String   @unique
  shareToken String   @unique
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  taskList TaskList @relation(fields: [taskListId], references: [id], onDelete: Cascade)

  @@index([shareToken])
  @@map("task_list_shares")
}

model TaskListDocument {
  id                 String   @id @default(cuid())
  taskListId         String   @unique
  stateVector        Bytes
  documentState      Bytes
  activeSessionCount Int      @default(0)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  taskList TaskList @relation(fields: [taskListId], references: [id], onDelete: Cascade)

  @@map("task_list_documents")
}

model CollaborativeSession {
  id             String   @id @default(cuid())
  taskListId     String
  appId          String
  deviceId       String
  sessionType    String   @default("active")
  lastActivity   DateTime @default(now())
  expiresAt      DateTime
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  taskList TaskList @relation(fields: [taskListId], references: [id], onDelete: Cascade)
  app      App      @relation(fields: [appId], references: [id], onDelete: Cascade)

  @@unique([taskListId, appId, deviceId])
  @@index([taskListId])
  @@index([expiresAt])
  @@index([appId])
  @@map("collaborative_sessions")
}

model RefreshToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  deviceId  String
  expiresAt DateTime
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([deviceId])
  @@map("refresh_tokens")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  isUsed    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([expiresAt])
  @@map("password_reset_tokens")
}